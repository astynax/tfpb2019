Алексей Пирогов
 
ADT - Algebraic Data Structures. Это структуры данных, поддерживающух некую алгебру, в виде 2 операций: сложение и умножение. 

Что складывается и умножается? Типы!


Пусть у нас есть тип  B = T | F -> Здесь мы записали, что B - это тип, состоящй из суммы типов T и F

Что такое произведение? Это пара/тройка/n-ка значений. Например для B выше произведение (B * B) -> 4 возможных значения

unit - это тип с одним значением. В хаскеле это ().
---


Попробуем сделать тип RGB. Каждый цвет задается 6 битиками. Всего получается 6^3 значений. 

А можем сделать градиент в виде (RGB, RGB) - т.е. пара из двух RGB. И того 6^3^2 значений

А можем еще задачать цвет как тон, насыщенность и светлота в вида HSL. Он тоже задается как 6^3 битиков.

И в принципе один другой заменяет. Тогда мы можем сказать, что цвет это:

Color = RGB | HSL. Т.е. всякий раз когда мы говорим о цвете, мы говорим именно о цвете, а сам тип цвета - это реализация способа представления.
--- 

data RGB = RGB Int Int Int -- это констуктор значений 

В хаскеле мы получается пишем 2 программы - одна на типах, вторая на значениях этих типов
----


Extension problem - есть набор нечто (фигуры, например) и есть набор операций. Добавить новую функцию обычно легко, но добавить новую фигуру сложно, так как приходится дореализовывать все функции для всех случаев.

А в тайп классами наоборот -> легко добавить новую фигуру, но тяжело добавить новую функцю. А может и нет, надо почитать


-----

ДЗ: Реализовать модель данных для задачи по ссылке: https://gist.github.com/astynax/1eb88e195c4bab2b8d31d04921b18dd0
В файле columns.hs приведен вариант решения задачи
В файле syntax_basics.hs лежат примеры синтаксиса языка хаскель с подробным описанием
